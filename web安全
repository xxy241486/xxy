1.SQL注入
描述：后台通过数据库查询数据时，使用用户输入的数据来组装SQL查询语句

举例：
比如地址栏输入的是：
articlrs/index.php?id=1
发送一个get请求， 调用的查询语句是：
sql = "SELECT * FROM articles WHERE id =", $id
正常情况下， 返回 id = 1 的文章。
如果攻击者想获得所有的文章，语句就可以改成：
articlrs/index.php?id=-1 OR 1 = 1

预防：避免数据变成代码被执行，对数据进行有效性判断后再处理

2.XSS攻击
描述：从后台传入的数据，前台未做处理，直接作为DOM拼接使用时
预防：任何涉及前台DOM渲染拼接的不可信字段都需要转码处理

3.CSRF攻击
描述：CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。
利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。
一个典型的CSRF攻击有着如下的流程：

受害者登录a.com，并保留了登录凭证（Cookie）。
攻击者引诱受害者访问了b.com。
b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会…
a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。
a.com以受害者的名义执行了act=xx。
攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。

解决方案：每次发送URL请求时加token


